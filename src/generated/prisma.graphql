# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Course implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  imageUrl: String
  instructors(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  students(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task!]
}

type File implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

type Poll implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  post(where: PostWhereInput): Post!
  options(where: PollOptionWhereInput, orderBy: PollOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PollOption!]
  endDate: DateTime
}

type PollOption implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  poll(where: PollWhereInput): Poll!
  name: String!
  votes(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  author(where: UserWhereInput): User!
  text: String!
  imageUrl: String
  poll(where: PollWhereInput): Poll
}

type Task implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  done: Boolean
  course(where: CourseWhereInput): Course
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  username: String!
  firstName: String!
  lastName: String!
  imageUrl: String
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  coursesTaught(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  coursesTaken(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
  votesCasted(where: PollOptionWhereInput, orderBy: PollOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PollOption!]
}


#
# Other Types
#

type AggregateCourse {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregatePoll {
  count: Int!
}

type AggregatePollOption {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateTask {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type CourseConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  name: String!
  description: String!
  imageUrl: String
  instructors: UserCreateManyWithoutCoursesTaughtInput
  students: UserCreateManyWithoutCoursesTakenInput
  tasks: TaskCreateManyWithoutCourseInput
}

input CourseCreateManyWithoutInstructorsInput {
  create: [CourseCreateWithoutInstructorsInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateManyWithoutStudentsInput {
  create: [CourseCreateWithoutStudentsInput!]
  connect: [CourseWhereUniqueInput!]
}

input CourseCreateOneWithoutTasksInput {
  create: CourseCreateWithoutTasksInput
  connect: CourseWhereUniqueInput
}

input CourseCreateWithoutInstructorsInput {
  name: String!
  description: String!
  imageUrl: String
  students: UserCreateManyWithoutCoursesTakenInput
  tasks: TaskCreateManyWithoutCourseInput
}

input CourseCreateWithoutStudentsInput {
  name: String!
  description: String!
  imageUrl: String
  instructors: UserCreateManyWithoutCoursesTaughtInput
  tasks: TaskCreateManyWithoutCourseInput
}

input CourseCreateWithoutTasksInput {
  name: String!
  description: String!
  imageUrl: String
  instructors: UserCreateManyWithoutCoursesTaughtInput
  students: UserCreateManyWithoutCoursesTakenInput
}

"""
An edge in a connection.
"""
type CourseEdge {
  """
  The item at the end of the edge.
  """
  node: Course!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  imageUrl_ASC
  imageUrl_DESC
}

type CoursePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  imageUrl: String
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CourseSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CourseSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
}

input CourseUpdateInput {
  name: String
  description: String
  imageUrl: String
  instructors: UserUpdateManyWithoutCoursesTaughtInput
  students: UserUpdateManyWithoutCoursesTakenInput
  tasks: TaskUpdateManyWithoutCourseInput
}

input CourseUpdateManyWithoutInstructorsInput {
  create: [CourseCreateWithoutInstructorsInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithoutInstructorsInput!]
  upsert: [CourseUpsertWithoutInstructorsInput!]
}

input CourseUpdateManyWithoutStudentsInput {
  create: [CourseCreateWithoutStudentsInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithoutStudentsInput!]
  upsert: [CourseUpsertWithoutStudentsInput!]
}

input CourseUpdateOneWithoutTasksInput {
  create: CourseCreateWithoutTasksInput
  connect: CourseWhereUniqueInput
  disconnect: CourseWhereUniqueInput
  delete: CourseWhereUniqueInput
  update: CourseUpdateWithoutTasksInput
  upsert: CourseUpsertWithoutTasksInput
}

input CourseUpdateWithoutInstructorsDataInput {
  name: String
  description: String
  imageUrl: String
  students: UserUpdateManyWithoutCoursesTakenInput
  tasks: TaskUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutInstructorsInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutInstructorsDataInput!
}

input CourseUpdateWithoutStudentsDataInput {
  name: String
  description: String
  imageUrl: String
  instructors: UserUpdateManyWithoutCoursesTaughtInput
  tasks: TaskUpdateManyWithoutCourseInput
}

input CourseUpdateWithoutStudentsInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutStudentsDataInput!
}

input CourseUpdateWithoutTasksDataInput {
  name: String
  description: String
  imageUrl: String
  instructors: UserUpdateManyWithoutCoursesTaughtInput
  students: UserUpdateManyWithoutCoursesTakenInput
}

input CourseUpdateWithoutTasksInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateWithoutTasksDataInput!
}

input CourseUpsertWithoutInstructorsInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutInstructorsDataInput!
  create: CourseCreateWithoutInstructorsInput!
}

input CourseUpsertWithoutStudentsInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutStudentsDataInput!
  create: CourseCreateWithoutStudentsInput!
}

input CourseUpsertWithoutTasksInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateWithoutTasksDataInput!
  create: CourseCreateWithoutTasksInput!
}

input CourseWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CourseWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CourseWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  imageUrl: String
  """
  All values that are not equal to given value.
  """
  imageUrl_not: String
  """
  All values that are contained in given list.
  """
  imageUrl_in: [String!]
  """
  All values that are not contained in given list.
  """
  imageUrl_not_in: [String!]
  """
  All values less than the given value.
  """
  imageUrl_lt: String
  """
  All values less than or equal the given value.
  """
  imageUrl_lte: String
  """
  All values greater than the given value.
  """
  imageUrl_gt: String
  """
  All values greater than or equal the given value.
  """
  imageUrl_gte: String
  """
  All values containing the given string.
  """
  imageUrl_contains: String
  """
  All values not containing the given string.
  """
  imageUrl_not_contains: String
  """
  All values starting with the given string.
  """
  imageUrl_starts_with: String
  """
  All values not starting with the given string.
  """
  imageUrl_not_starts_with: String
  """
  All values ending with the given string.
  """
  imageUrl_ends_with: String
  """
  All values not ending with the given string.
  """
  imageUrl_not_ends_with: String
  instructors_every: UserWhereInput
  instructors_some: UserWhereInput
  instructors_none: UserWhereInput
  students_every: UserWhereInput
  students_some: UserWhereInput
  students_none: UserWhereInput
  tasks_every: TaskWhereInput
  tasks_some: TaskWhereInput
  tasks_none: TaskWhereInput
}

input CourseWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
A connection to a list of items.
"""
type FileConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

"""
An edge in a connection.
"""
type FileEdge {
  """
  The item at the end of the edge.
  """
  node: File!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  filename_ASC
  filename_DESC
  mimetype_ASC
  mimetype_DESC
  encoding_ASC
  encoding_DESC
  url_ASC
  url_DESC
}

type FilePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FileSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FileSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input FileWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FileWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [FileWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  filename: String
  """
  All values that are not equal to given value.
  """
  filename_not: String
  """
  All values that are contained in given list.
  """
  filename_in: [String!]
  """
  All values that are not contained in given list.
  """
  filename_not_in: [String!]
  """
  All values less than the given value.
  """
  filename_lt: String
  """
  All values less than or equal the given value.
  """
  filename_lte: String
  """
  All values greater than the given value.
  """
  filename_gt: String
  """
  All values greater than or equal the given value.
  """
  filename_gte: String
  """
  All values containing the given string.
  """
  filename_contains: String
  """
  All values not containing the given string.
  """
  filename_not_contains: String
  """
  All values starting with the given string.
  """
  filename_starts_with: String
  """
  All values not starting with the given string.
  """
  filename_not_starts_with: String
  """
  All values ending with the given string.
  """
  filename_ends_with: String
  """
  All values not ending with the given string.
  """
  filename_not_ends_with: String
  mimetype: String
  """
  All values that are not equal to given value.
  """
  mimetype_not: String
  """
  All values that are contained in given list.
  """
  mimetype_in: [String!]
  """
  All values that are not contained in given list.
  """
  mimetype_not_in: [String!]
  """
  All values less than the given value.
  """
  mimetype_lt: String
  """
  All values less than or equal the given value.
  """
  mimetype_lte: String
  """
  All values greater than the given value.
  """
  mimetype_gt: String
  """
  All values greater than or equal the given value.
  """
  mimetype_gte: String
  """
  All values containing the given string.
  """
  mimetype_contains: String
  """
  All values not containing the given string.
  """
  mimetype_not_contains: String
  """
  All values starting with the given string.
  """
  mimetype_starts_with: String
  """
  All values not starting with the given string.
  """
  mimetype_not_starts_with: String
  """
  All values ending with the given string.
  """
  mimetype_ends_with: String
  """
  All values not ending with the given string.
  """
  mimetype_not_ends_with: String
  encoding: String
  """
  All values that are not equal to given value.
  """
  encoding_not: String
  """
  All values that are contained in given list.
  """
  encoding_in: [String!]
  """
  All values that are not contained in given list.
  """
  encoding_not_in: [String!]
  """
  All values less than the given value.
  """
  encoding_lt: String
  """
  All values less than or equal the given value.
  """
  encoding_lte: String
  """
  All values greater than the given value.
  """
  encoding_gt: String
  """
  All values greater than or equal the given value.
  """
  encoding_gte: String
  """
  All values containing the given string.
  """
  encoding_contains: String
  """
  All values not containing the given string.
  """
  encoding_not_contains: String
  """
  All values starting with the given string.
  """
  encoding_starts_with: String
  """
  All values not starting with the given string.
  """
  encoding_not_starts_with: String
  """
  All values ending with the given string.
  """
  encoding_ends_with: String
  """
  All values not ending with the given string.
  """
  encoding_not_ends_with: String
  url: String
  """
  All values that are not equal to given value.
  """
  url_not: String
  """
  All values that are contained in given list.
  """
  url_in: [String!]
  """
  All values that are not contained in given list.
  """
  url_not_in: [String!]
  """
  All values less than the given value.
  """
  url_lt: String
  """
  All values less than or equal the given value.
  """
  url_lte: String
  """
  All values greater than the given value.
  """
  url_gt: String
  """
  All values greater than or equal the given value.
  """
  url_gte: String
  """
  All values containing the given string.
  """
  url_contains: String
  """
  All values not containing the given string.
  """
  url_not_contains: String
  """
  All values starting with the given string.
  """
  url_starts_with: String
  """
  All values not starting with the given string.
  """
  url_not_starts_with: String
  """
  All values ending with the given string.
  """
  url_ends_with: String
  """
  All values not ending with the given string.
  """
  url_not_ends_with: String
}

input FileWhereUniqueInput {
  id: ID
  url: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createFile(data: FileCreateInput!): File!
  createUser(data: UserCreateInput!): User!
  createCourse(data: CourseCreateInput!): Course!
  createTask(data: TaskCreateInput!): Task!
  createPost(data: PostCreateInput!): Post!
  createPoll(data: PollCreateInput!): Poll!
  createPollOption(data: PollOptionCreateInput!): PollOption!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updatePoll(data: PollUpdateInput!, where: PollWhereUniqueInput!): Poll
  updatePollOption(data: PollOptionUpdateInput!, where: PollOptionWhereUniqueInput!): PollOption
  deleteFile(where: FileWhereUniqueInput!): File
  deleteUser(where: UserWhereUniqueInput!): User
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteTask(where: TaskWhereUniqueInput!): Task
  deletePost(where: PostWhereUniqueInput!): Post
  deletePoll(where: PollWhereUniqueInput!): Poll
  deletePollOption(where: PollOptionWhereUniqueInput!): PollOption
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  upsertTask(where: TaskWhereUniqueInput!, create: TaskCreateInput!, update: TaskUpdateInput!): Task!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertPoll(where: PollWhereUniqueInput!, create: PollCreateInput!, update: PollUpdateInput!): Poll!
  upsertPollOption(where: PollOptionWhereUniqueInput!, create: PollOptionCreateInput!, update: PollOptionUpdateInput!): PollOption!
  updateManyFiles(data: FileUpdateInput!, where: FileWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyCourses(data: CourseUpdateInput!, where: CourseWhereInput!): BatchPayload!
  updateManyTasks(data: TaskUpdateInput!, where: TaskWhereInput!): BatchPayload!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyPolls(data: PollUpdateInput!, where: PollWhereInput!): BatchPayload!
  updateManyPollOptions(data: PollOptionUpdateInput!, where: PollOptionWhereInput!): BatchPayload!
  deleteManyFiles(where: FileWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyCourses(where: CourseWhereInput!): BatchPayload!
  deleteManyTasks(where: TaskWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyPolls(where: PollWhereInput!): BatchPayload!
  deleteManyPollOptions(where: PollOptionWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PollConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PollEdge]!
  aggregate: AggregatePoll!
}

input PollCreateInput {
  endDate: DateTime
  post: PostCreateOneWithoutPollInput!
  options: PollOptionCreateManyWithoutPollInput
}

input PollCreateOneWithoutOptionsInput {
  create: PollCreateWithoutOptionsInput
  connect: PollWhereUniqueInput
}

input PollCreateOneWithoutPostInput {
  create: PollCreateWithoutPostInput
  connect: PollWhereUniqueInput
}

input PollCreateWithoutOptionsInput {
  endDate: DateTime
  post: PostCreateOneWithoutPollInput!
}

input PollCreateWithoutPostInput {
  endDate: DateTime
  options: PollOptionCreateManyWithoutPollInput
}

"""
An edge in a connection.
"""
type PollEdge {
  """
  The item at the end of the edge.
  """
  node: Poll!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
A connection to a list of items.
"""
type PollOptionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PollOptionEdge]!
  aggregate: AggregatePollOption!
}

input PollOptionCreateInput {
  name: String!
  poll: PollCreateOneWithoutOptionsInput!
  votes: UserCreateManyWithoutVotesCastedInput
}

input PollOptionCreateManyWithoutPollInput {
  create: [PollOptionCreateWithoutPollInput!]
  connect: [PollOptionWhereUniqueInput!]
}

input PollOptionCreateManyWithoutVotesInput {
  create: [PollOptionCreateWithoutVotesInput!]
  connect: [PollOptionWhereUniqueInput!]
}

input PollOptionCreateWithoutPollInput {
  name: String!
  votes: UserCreateManyWithoutVotesCastedInput
}

input PollOptionCreateWithoutVotesInput {
  name: String!
  poll: PollCreateOneWithoutOptionsInput!
}

"""
An edge in a connection.
"""
type PollOptionEdge {
  """
  The item at the end of the edge.
  """
  node: PollOption!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PollOptionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type PollOptionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type PollOptionSubscriptionPayload {
  mutation: MutationType!
  node: PollOption
  updatedFields: [String!]
  previousValues: PollOptionPreviousValues
}

input PollOptionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PollOptionSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PollOptionSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PollOptionWhereInput
}

input PollOptionUpdateInput {
  name: String
  poll: PollUpdateOneWithoutOptionsInput
  votes: UserUpdateManyWithoutVotesCastedInput
}

input PollOptionUpdateManyWithoutPollInput {
  create: [PollOptionCreateWithoutPollInput!]
  connect: [PollOptionWhereUniqueInput!]
  disconnect: [PollOptionWhereUniqueInput!]
  delete: [PollOptionWhereUniqueInput!]
  update: [PollOptionUpdateWithoutPollInput!]
  upsert: [PollOptionUpsertWithoutPollInput!]
}

input PollOptionUpdateManyWithoutVotesInput {
  create: [PollOptionCreateWithoutVotesInput!]
  connect: [PollOptionWhereUniqueInput!]
  disconnect: [PollOptionWhereUniqueInput!]
  delete: [PollOptionWhereUniqueInput!]
  update: [PollOptionUpdateWithoutVotesInput!]
  upsert: [PollOptionUpsertWithoutVotesInput!]
}

input PollOptionUpdateWithoutPollDataInput {
  name: String
  votes: UserUpdateManyWithoutVotesCastedInput
}

input PollOptionUpdateWithoutPollInput {
  where: PollOptionWhereUniqueInput!
  data: PollOptionUpdateWithoutPollDataInput!
}

input PollOptionUpdateWithoutVotesDataInput {
  name: String
  poll: PollUpdateOneWithoutOptionsInput
}

input PollOptionUpdateWithoutVotesInput {
  where: PollOptionWhereUniqueInput!
  data: PollOptionUpdateWithoutVotesDataInput!
}

input PollOptionUpsertWithoutPollInput {
  where: PollOptionWhereUniqueInput!
  update: PollOptionUpdateWithoutPollDataInput!
  create: PollOptionCreateWithoutPollInput!
}

input PollOptionUpsertWithoutVotesInput {
  where: PollOptionWhereUniqueInput!
  update: PollOptionUpdateWithoutVotesDataInput!
  create: PollOptionCreateWithoutVotesInput!
}

input PollOptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PollOptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PollOptionWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  poll: PollWhereInput
  votes_every: UserWhereInput
  votes_some: UserWhereInput
  votes_none: UserWhereInput
}

input PollOptionWhereUniqueInput {
  id: ID
}

enum PollOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  endDate_ASC
  endDate_DESC
}

type PollPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  endDate: DateTime
}

type PollSubscriptionPayload {
  mutation: MutationType!
  node: Poll
  updatedFields: [String!]
  previousValues: PollPreviousValues
}

input PollSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PollSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PollSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PollWhereInput
}

input PollUpdateInput {
  endDate: DateTime
  post: PostUpdateOneWithoutPollInput
  options: PollOptionUpdateManyWithoutPollInput
}

input PollUpdateOneWithoutOptionsInput {
  create: PollCreateWithoutOptionsInput
  connect: PollWhereUniqueInput
  disconnect: PollWhereUniqueInput
  delete: PollWhereUniqueInput
  update: PollUpdateWithoutOptionsInput
  upsert: PollUpsertWithoutOptionsInput
}

input PollUpdateOneWithoutPostInput {
  create: PollCreateWithoutPostInput
  connect: PollWhereUniqueInput
  disconnect: PollWhereUniqueInput
  delete: PollWhereUniqueInput
  update: PollUpdateWithoutPostInput
  upsert: PollUpsertWithoutPostInput
}

input PollUpdateWithoutOptionsDataInput {
  endDate: DateTime
  post: PostUpdateOneWithoutPollInput
}

input PollUpdateWithoutOptionsInput {
  where: PollWhereUniqueInput!
  data: PollUpdateWithoutOptionsDataInput!
}

input PollUpdateWithoutPostDataInput {
  endDate: DateTime
  options: PollOptionUpdateManyWithoutPollInput
}

input PollUpdateWithoutPostInput {
  where: PollWhereUniqueInput!
  data: PollUpdateWithoutPostDataInput!
}

input PollUpsertWithoutOptionsInput {
  where: PollWhereUniqueInput!
  update: PollUpdateWithoutOptionsDataInput!
  create: PollCreateWithoutOptionsInput!
}

input PollUpsertWithoutPostInput {
  where: PollWhereUniqueInput!
  update: PollUpdateWithoutPostDataInput!
  create: PollCreateWithoutPostInput!
}

input PollWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PollWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PollWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  endDate: DateTime
  """
  All values that are not equal to given value.
  """
  endDate_not: DateTime
  """
  All values that are contained in given list.
  """
  endDate_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  endDate_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  endDate_lt: DateTime
  """
  All values less than or equal the given value.
  """
  endDate_lte: DateTime
  """
  All values greater than the given value.
  """
  endDate_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  endDate_gte: DateTime
  post: PostWhereInput
  options_every: PollOptionWhereInput
  options_some: PollOptionWhereInput
  options_none: PollOptionWhereInput
}

input PollWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type PostConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  text: String!
  imageUrl: String
  author: UserCreateOneWithoutPostsInput!
  poll: PollCreateOneWithoutPostInput
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateOneWithoutPollInput {
  create: PostCreateWithoutPollInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutAuthorInput {
  text: String!
  imageUrl: String
  poll: PollCreateOneWithoutPostInput
}

input PostCreateWithoutPollInput {
  text: String!
  imageUrl: String
  author: UserCreateOneWithoutPostsInput!
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  text_ASC
  text_DESC
  imageUrl_ASC
  imageUrl_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
  imageUrl: String
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  text: String
  imageUrl: String
  author: UserUpdateOneWithoutPostsInput
  poll: PollUpdateOneWithoutPostInput
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithoutAuthorInput!]
  upsert: [PostUpsertWithoutAuthorInput!]
}

input PostUpdateOneWithoutPollInput {
  create: PostCreateWithoutPollInput
  connect: PostWhereUniqueInput
  disconnect: PostWhereUniqueInput
  delete: PostWhereUniqueInput
  update: PostUpdateWithoutPollInput
  upsert: PostUpsertWithoutPollInput
}

input PostUpdateWithoutAuthorDataInput {
  text: String
  imageUrl: String
  poll: PollUpdateOneWithoutPostInput
}

input PostUpdateWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpdateWithoutPollDataInput {
  text: String
  imageUrl: String
  author: UserUpdateOneWithoutPostsInput
}

input PostUpdateWithoutPollInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutPollDataInput!
}

input PostUpsertWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostUpsertWithoutPollInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutPollDataInput!
  create: PostCreateWithoutPollInput!
}

input PostWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  text: String
  """
  All values that are not equal to given value.
  """
  text_not: String
  """
  All values that are contained in given list.
  """
  text_in: [String!]
  """
  All values that are not contained in given list.
  """
  text_not_in: [String!]
  """
  All values less than the given value.
  """
  text_lt: String
  """
  All values less than or equal the given value.
  """
  text_lte: String
  """
  All values greater than the given value.
  """
  text_gt: String
  """
  All values greater than or equal the given value.
  """
  text_gte: String
  """
  All values containing the given string.
  """
  text_contains: String
  """
  All values not containing the given string.
  """
  text_not_contains: String
  """
  All values starting with the given string.
  """
  text_starts_with: String
  """
  All values not starting with the given string.
  """
  text_not_starts_with: String
  """
  All values ending with the given string.
  """
  text_ends_with: String
  """
  All values not ending with the given string.
  """
  text_not_ends_with: String
  imageUrl: String
  """
  All values that are not equal to given value.
  """
  imageUrl_not: String
  """
  All values that are contained in given list.
  """
  imageUrl_in: [String!]
  """
  All values that are not contained in given list.
  """
  imageUrl_not_in: [String!]
  """
  All values less than the given value.
  """
  imageUrl_lt: String
  """
  All values less than or equal the given value.
  """
  imageUrl_lte: String
  """
  All values greater than the given value.
  """
  imageUrl_gt: String
  """
  All values greater than or equal the given value.
  """
  imageUrl_gte: String
  """
  All values containing the given string.
  """
  imageUrl_contains: String
  """
  All values not containing the given string.
  """
  imageUrl_not_contains: String
  """
  All values starting with the given string.
  """
  imageUrl_starts_with: String
  """
  All values not starting with the given string.
  """
  imageUrl_not_starts_with: String
  """
  All values ending with the given string.
  """
  imageUrl_ends_with: String
  """
  All values not ending with the given string.
  """
  imageUrl_not_ends_with: String
  author: UserWhereInput
  poll: PollWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  polls(where: PollWhereInput, orderBy: PollOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Poll]!
  pollOptions(where: PollOptionWhereInput, orderBy: PollOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PollOption]!
  file(where: FileWhereUniqueInput!): File
  user(where: UserWhereUniqueInput!): User
  course(where: CourseWhereUniqueInput!): Course
  task(where: TaskWhereUniqueInput!): Task
  post(where: PostWhereUniqueInput!): Post
  poll(where: PollWhereUniqueInput!): Poll
  pollOption(where: PollOptionWhereUniqueInput!): PollOption
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  tasksConnection(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TaskConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  pollsConnection(where: PollWhereInput, orderBy: PollOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PollConnection!
  pollOptionsConnection(where: PollOptionWhereInput, orderBy: PollOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PollOptionConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  task(where: TaskSubscriptionWhereInput): TaskSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  poll(where: PollSubscriptionWhereInput): PollSubscriptionPayload
  pollOption(where: PollOptionSubscriptionWhereInput): PollOptionSubscriptionPayload
}

"""
A connection to a list of items.
"""
type TaskConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [TaskEdge]!
  aggregate: AggregateTask!
}

input TaskCreateInput {
  name: String!
  description: String
  done: Boolean
  course: CourseCreateOneWithoutTasksInput
}

input TaskCreateManyWithoutCourseInput {
  create: [TaskCreateWithoutCourseInput!]
  connect: [TaskWhereUniqueInput!]
}

input TaskCreateWithoutCourseInput {
  name: String!
  description: String
  done: Boolean
}

"""
An edge in a connection.
"""
type TaskEdge {
  """
  The item at the end of the edge.
  """
  node: Task!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum TaskOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  done_ASC
  done_DESC
}

type TaskPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  done: Boolean
}

type TaskSubscriptionPayload {
  mutation: MutationType!
  node: Task
  updatedFields: [String!]
  previousValues: TaskPreviousValues
}

input TaskSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TaskSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [TaskSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TaskWhereInput
}

input TaskUpdateInput {
  name: String
  description: String
  done: Boolean
  course: CourseUpdateOneWithoutTasksInput
}

input TaskUpdateManyWithoutCourseInput {
  create: [TaskCreateWithoutCourseInput!]
  connect: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  delete: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithoutCourseInput!]
  upsert: [TaskUpsertWithoutCourseInput!]
}

input TaskUpdateWithoutCourseDataInput {
  name: String
  description: String
  done: Boolean
}

input TaskUpdateWithoutCourseInput {
  where: TaskWhereUniqueInput!
  data: TaskUpdateWithoutCourseDataInput!
}

input TaskUpsertWithoutCourseInput {
  where: TaskWhereUniqueInput!
  update: TaskUpdateWithoutCourseDataInput!
  create: TaskCreateWithoutCourseInput!
}

input TaskWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [TaskWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [TaskWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  description: String
  """
  All values that are not equal to given value.
  """
  description_not: String
  """
  All values that are contained in given list.
  """
  description_in: [String!]
  """
  All values that are not contained in given list.
  """
  description_not_in: [String!]
  """
  All values less than the given value.
  """
  description_lt: String
  """
  All values less than or equal the given value.
  """
  description_lte: String
  """
  All values greater than the given value.
  """
  description_gt: String
  """
  All values greater than or equal the given value.
  """
  description_gte: String
  """
  All values containing the given string.
  """
  description_contains: String
  """
  All values not containing the given string.
  """
  description_not_contains: String
  """
  All values starting with the given string.
  """
  description_starts_with: String
  """
  All values not starting with the given string.
  """
  description_not_starts_with: String
  """
  All values ending with the given string.
  """
  description_ends_with: String
  """
  All values not ending with the given string.
  """
  description_not_ends_with: String
  done: Boolean
  """
  All values that are not equal to given value.
  """
  done_not: Boolean
  course: CourseWhereInput
}

input TaskWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  username: String!
  firstName: String!
  lastName: String!
  imageUrl: String
  posts: PostCreateManyWithoutAuthorInput
  coursesTaught: CourseCreateManyWithoutInstructorsInput
  coursesTaken: CourseCreateManyWithoutStudentsInput
  votesCasted: PollOptionCreateManyWithoutVotesInput
}

input UserCreateManyWithoutCoursesTakenInput {
  create: [UserCreateWithoutCoursesTakenInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutCoursesTaughtInput {
  create: [UserCreateWithoutCoursesTaughtInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutVotesCastedInput {
  create: [UserCreateWithoutVotesCastedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCoursesTakenInput {
  email: String!
  password: String!
  username: String!
  firstName: String!
  lastName: String!
  imageUrl: String
  posts: PostCreateManyWithoutAuthorInput
  coursesTaught: CourseCreateManyWithoutInstructorsInput
  votesCasted: PollOptionCreateManyWithoutVotesInput
}

input UserCreateWithoutCoursesTaughtInput {
  email: String!
  password: String!
  username: String!
  firstName: String!
  lastName: String!
  imageUrl: String
  posts: PostCreateManyWithoutAuthorInput
  coursesTaken: CourseCreateManyWithoutStudentsInput
  votesCasted: PollOptionCreateManyWithoutVotesInput
}

input UserCreateWithoutPostsInput {
  email: String!
  password: String!
  username: String!
  firstName: String!
  lastName: String!
  imageUrl: String
  coursesTaught: CourseCreateManyWithoutInstructorsInput
  coursesTaken: CourseCreateManyWithoutStudentsInput
  votesCasted: PollOptionCreateManyWithoutVotesInput
}

input UserCreateWithoutVotesCastedInput {
  email: String!
  password: String!
  username: String!
  firstName: String!
  lastName: String!
  imageUrl: String
  posts: PostCreateManyWithoutAuthorInput
  coursesTaught: CourseCreateManyWithoutInstructorsInput
  coursesTaken: CourseCreateManyWithoutStudentsInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  username_ASC
  username_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  imageUrl_ASC
  imageUrl_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  username: String!
  firstName: String!
  lastName: String!
  imageUrl: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  username: String
  firstName: String
  lastName: String
  imageUrl: String
  posts: PostUpdateManyWithoutAuthorInput
  coursesTaught: CourseUpdateManyWithoutInstructorsInput
  coursesTaken: CourseUpdateManyWithoutStudentsInput
  votesCasted: PollOptionUpdateManyWithoutVotesInput
}

input UserUpdateManyWithoutCoursesTakenInput {
  create: [UserCreateWithoutCoursesTakenInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutCoursesTakenInput!]
  upsert: [UserUpsertWithoutCoursesTakenInput!]
}

input UserUpdateManyWithoutCoursesTaughtInput {
  create: [UserCreateWithoutCoursesTaughtInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutCoursesTaughtInput!]
  upsert: [UserUpsertWithoutCoursesTaughtInput!]
}

input UserUpdateManyWithoutVotesCastedInput {
  create: [UserCreateWithoutVotesCastedInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutVotesCastedInput!]
  upsert: [UserUpsertWithoutVotesCastedInput!]
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutCoursesTakenDataInput {
  email: String
  password: String
  username: String
  firstName: String
  lastName: String
  imageUrl: String
  posts: PostUpdateManyWithoutAuthorInput
  coursesTaught: CourseUpdateManyWithoutInstructorsInput
  votesCasted: PollOptionUpdateManyWithoutVotesInput
}

input UserUpdateWithoutCoursesTakenInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCoursesTakenDataInput!
}

input UserUpdateWithoutCoursesTaughtDataInput {
  email: String
  password: String
  username: String
  firstName: String
  lastName: String
  imageUrl: String
  posts: PostUpdateManyWithoutAuthorInput
  coursesTaken: CourseUpdateManyWithoutStudentsInput
  votesCasted: PollOptionUpdateManyWithoutVotesInput
}

input UserUpdateWithoutCoursesTaughtInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCoursesTaughtDataInput!
}

input UserUpdateWithoutPostsDataInput {
  email: String
  password: String
  username: String
  firstName: String
  lastName: String
  imageUrl: String
  coursesTaught: CourseUpdateManyWithoutInstructorsInput
  coursesTaken: CourseUpdateManyWithoutStudentsInput
  votesCasted: PollOptionUpdateManyWithoutVotesInput
}

input UserUpdateWithoutPostsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPostsDataInput!
}

input UserUpdateWithoutVotesCastedDataInput {
  email: String
  password: String
  username: String
  firstName: String
  lastName: String
  imageUrl: String
  posts: PostUpdateManyWithoutAuthorInput
  coursesTaught: CourseUpdateManyWithoutInstructorsInput
  coursesTaken: CourseUpdateManyWithoutStudentsInput
}

input UserUpdateWithoutVotesCastedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutVotesCastedDataInput!
}

input UserUpsertWithoutCoursesTakenInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCoursesTakenDataInput!
  create: UserCreateWithoutCoursesTakenInput!
}

input UserUpsertWithoutCoursesTaughtInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCoursesTaughtDataInput!
  create: UserCreateWithoutCoursesTaughtInput!
}

input UserUpsertWithoutPostsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserUpsertWithoutVotesCastedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutVotesCastedDataInput!
  create: UserCreateWithoutVotesCastedInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  username: String
  """
  All values that are not equal to given value.
  """
  username_not: String
  """
  All values that are contained in given list.
  """
  username_in: [String!]
  """
  All values that are not contained in given list.
  """
  username_not_in: [String!]
  """
  All values less than the given value.
  """
  username_lt: String
  """
  All values less than or equal the given value.
  """
  username_lte: String
  """
  All values greater than the given value.
  """
  username_gt: String
  """
  All values greater than or equal the given value.
  """
  username_gte: String
  """
  All values containing the given string.
  """
  username_contains: String
  """
  All values not containing the given string.
  """
  username_not_contains: String
  """
  All values starting with the given string.
  """
  username_starts_with: String
  """
  All values not starting with the given string.
  """
  username_not_starts_with: String
  """
  All values ending with the given string.
  """
  username_ends_with: String
  """
  All values not ending with the given string.
  """
  username_not_ends_with: String
  firstName: String
  """
  All values that are not equal to given value.
  """
  firstName_not: String
  """
  All values that are contained in given list.
  """
  firstName_in: [String!]
  """
  All values that are not contained in given list.
  """
  firstName_not_in: [String!]
  """
  All values less than the given value.
  """
  firstName_lt: String
  """
  All values less than or equal the given value.
  """
  firstName_lte: String
  """
  All values greater than the given value.
  """
  firstName_gt: String
  """
  All values greater than or equal the given value.
  """
  firstName_gte: String
  """
  All values containing the given string.
  """
  firstName_contains: String
  """
  All values not containing the given string.
  """
  firstName_not_contains: String
  """
  All values starting with the given string.
  """
  firstName_starts_with: String
  """
  All values not starting with the given string.
  """
  firstName_not_starts_with: String
  """
  All values ending with the given string.
  """
  firstName_ends_with: String
  """
  All values not ending with the given string.
  """
  firstName_not_ends_with: String
  lastName: String
  """
  All values that are not equal to given value.
  """
  lastName_not: String
  """
  All values that are contained in given list.
  """
  lastName_in: [String!]
  """
  All values that are not contained in given list.
  """
  lastName_not_in: [String!]
  """
  All values less than the given value.
  """
  lastName_lt: String
  """
  All values less than or equal the given value.
  """
  lastName_lte: String
  """
  All values greater than the given value.
  """
  lastName_gt: String
  """
  All values greater than or equal the given value.
  """
  lastName_gte: String
  """
  All values containing the given string.
  """
  lastName_contains: String
  """
  All values not containing the given string.
  """
  lastName_not_contains: String
  """
  All values starting with the given string.
  """
  lastName_starts_with: String
  """
  All values not starting with the given string.
  """
  lastName_not_starts_with: String
  """
  All values ending with the given string.
  """
  lastName_ends_with: String
  """
  All values not ending with the given string.
  """
  lastName_not_ends_with: String
  imageUrl: String
  """
  All values that are not equal to given value.
  """
  imageUrl_not: String
  """
  All values that are contained in given list.
  """
  imageUrl_in: [String!]
  """
  All values that are not contained in given list.
  """
  imageUrl_not_in: [String!]
  """
  All values less than the given value.
  """
  imageUrl_lt: String
  """
  All values less than or equal the given value.
  """
  imageUrl_lte: String
  """
  All values greater than the given value.
  """
  imageUrl_gt: String
  """
  All values greater than or equal the given value.
  """
  imageUrl_gte: String
  """
  All values containing the given string.
  """
  imageUrl_contains: String
  """
  All values not containing the given string.
  """
  imageUrl_not_contains: String
  """
  All values starting with the given string.
  """
  imageUrl_starts_with: String
  """
  All values not starting with the given string.
  """
  imageUrl_not_starts_with: String
  """
  All values ending with the given string.
  """
  imageUrl_ends_with: String
  """
  All values not ending with the given string.
  """
  imageUrl_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  coursesTaught_every: CourseWhereInput
  coursesTaught_some: CourseWhereInput
  coursesTaught_none: CourseWhereInput
  coursesTaken_every: CourseWhereInput
  coursesTaken_some: CourseWhereInput
  coursesTaken_none: CourseWhereInput
  votesCasted_every: PollOptionWhereInput
  votesCasted_some: PollOptionWhereInput
  votesCasted_none: PollOptionWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}
